@using WordPress.Content.Models
@using WordPress.Controllers
@using WordPress.Content.ViewModels
@model WordPress.Content.ViewModels.WPContentViewModel

<div class="navbar navbar-inverse navbar-fixed-top">
    <div class="container">
        <div class="header-sticky-height"></div>
        <div class="header">
            <div class="row">
                <div class="logo" data-margin-top="6px" data-margin-bottom="8px" data-margin-left="0px" data-margin-right="0px">
                    <a class="logo-link" href="">
                        <!-- sticky header logo -->
                    </a>
                </div>
                <div class="navbar-header">
                    <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                    </button>
                    @Html.ActionLink("WordPress 4 .NET", "Index", "WordPress", new {area = ""}, new {@class = "navbar-brand"})
                </div>
                @if (@Model.TopNavMenuModel != null && Model.TopNavMenuModel.items != null && Model.TopNavMenuModel.items.Any())
                {
                    <div class="navbar-collapse collapse">
                        @*<div @Model.TopNavMenuModel.styles.GetSafeProperty("divTopMenuClass")>*@
                        <!--First Level Menu-->
                        <ul @Html.Raw(Model.TopNavMenuModel.styles.GetSafeProperty("ulTopMenuId")) @Html.Raw(Model.TopNavMenuModel.styles.GetSafeProperty("ulTopMenuClass"))>
                            @foreach (var menuItem in Model.TopNavMenuModel.items)
                            {
                                if (menuItem.object_slug != null)
                                {
                                    var routeValues = new RouteValueDictionary();
                                    routeValues.Add("id", menuItem.object_slug);
                                    var menuItemId = menuItem.id.ToString();

                                    <li @menuItem.styles.GetSafeProperty("liBaseMenuId" + "-" + @menuItemId) @Html.Raw(@menuItem.styles.GetSafeProperty("liBaseMenuClass" + "-" + @menuItemId))>
                                        @*@Html.ActionLink(menuItem.title, menuItem.type_label, routeValues)*@

                                        @if (menuItem.children == null)
                                        {
                                            @Html.ActionLink(menuItem.title, menuItem.type_label, routeValues)
                                        }
                                        else
                                        {
                                            <!--Second Level Menu-->
                                            <a class="dropdown-toggle" role="button" aria-expanded="false" href="@Url.RouteUrl(routeValues)" data-toggle="dropdown">@Html.Raw(menuItem.title)<span class="caret" data-toggle="dropdown"></span></a>
                                            <ul @menuItem.styles.GetSafeProperty("ulSubMenuClass" + "-" + @menuItemId)>
                                                @foreach (var childItem in menuItem.children)
                                                {
                                                    if (childItem.object_slug != null)
                                                    {
                                                        var routeValuesChild = new RouteValueDictionary();
                                                        routeValuesChild.Add("id", childItem.object_slug);
                                                        var menuItemIdChild = childItem.id.ToString();

                                                        <li @childItem.styles.GetSafeProperty("liBaseMenuId" + "-" + @menuItemIdChild) @Html.Raw(@childItem.styles.GetSafeProperty("liBaseMenuClass" + "-" + @menuItemIdChild))>
                                                            @Html.ActionLink(childItem.title, childItem.type_label, routeValuesChild)

                                                            @if (childItem.children != null && childItem.children.Any())
                                                            {
                                                                <!--Third Level Menu-->
                                                                <ul @childItem.styles.GetSafeProperty("ulSubMenuClass" + "-" + @menuItemIdChild)>
                                                                    @foreach (var subChildItem in childItem.children)
                                                                    {
                                                                        if (subChildItem.object_slug != null)
                                                                        {
                                                                            var routeValuesSubChild = new RouteValueDictionary();
                                                                            routeValuesSubChild.Add("id", subChildItem.object_slug);
                                                                            var menuItemIdSubChild = subChildItem.id.ToString();

                                                                            <li @subChildItem.styles.GetSafeProperty("liBaseMenuId" + "-" + @menuItemIdSubChild) @Html.Raw(subChildItem.styles.GetSafeProperty("liBaseMenuClass" + "-" + @menuItemIdSubChild))>
                                                                                @Html.ActionLink(subChildItem.title, subChildItem.type_label, routeValuesSubChild)
                                                                            </li>
                                                                        }
                                                                    }
                                                                </ul>
                                                            }
                                                        </li>
                                                    }

                                                }
                                            </ul>
                                        }

                                    </li>
                                }
                            }
                        </ul>

                    </div>
                }
                    </div>
        </div>
    </div>
    <div class="clearfix"></div>
</div>

